#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# testing:
# rm -rf /vagrant/test && mkdir -p /vagrant/test/build /vagrant/test/cache /vagrant/test/env
# ./bin/compile /vagrant/test/build /vagrant/test/cache /vagrant/test/env

set -e

# Urls of different sources
declare -A urls=(
  ['semeru-22.0.1+8']='https://github.com/ibmruntimes/semeru22-binaries/releases/download/jdk-22.0.1%2B8_openj9-0.45.0/ibm-semeru-open-jdk_x64_linux_22.0.1_8_openj9-0.45.0.tar.gz'
  ['semeru-22.0.2+9']='https://github.com/ibmruntimes/semeru22-binaries/releases/download/jdk-22.0.2%2B9_openj9-0.46.0/ibm-semeru-open-jdk_x64_linux_22.0.2_9_openj9-0.46.0.tar.gz'
  ['semeru-23.0.0+37']='https://github.com/ibmruntimes/semeru23-binaries/releases/download/jdk-23%2B37_openj9-0.47.0/ibm-semeru-open-jdk_x64_linux_23_37_openj9-0.47.0.tar.gz'
  ['semeru-23.0.1+11']='https://github.com/ibmruntimes/semeru23-binaries/releases/download/jdk-23.0.1%2B11_openj9-0.48.0/ibm-semeru-open-jdk_x64_linux_23.0.1_11_openj9-0.48.0.tar.gz'
  ['semeru-23.0.2+7']='https://github.com/ibmruntimes/semeru23-binaries/releases/download/jdk-23.0.2%2B7_openj9-0.49.0/ibm-semeru-open-jdk_x64_linux_23.0.2_7_openj9-0.49.0.tar.gz'
  ['semeru-24.0.2+12']='https://github.com/ibmruntimes/semeru24-binaries/releases/download/jdk-24.0.2%2B12_openj9-0.54.0/ibm-semeru-open-jdk_x64_linux_24.0.2_12_openj9-0.54.0.tar.gz'
  ['semeru-25.0.0-m2+36']='https://github.com/ibmruntimes/semeru25-binaries/releases/download/jdk-25%2B36_openj9-0.55.0-m2/ibm-semeru-open-jdk_x64_linux_25_36_openj9-0.55.0-m2.tar.gz'
  ['semeru-25.0.0+36.0.LTS']='https://github.com/ibmruntimes/semeru25-binaries/releases/download/jdk-25%2B36_openj9-0.55.0/ibm-semeru-open-jdk_x64_linux_25_36_openj9-0.55.0.tar.gz'
)

# SHA256 checksums of different sources
declare -A checksums=(
  ['semeru-22.0.1+8']='6e54d984bc0c058ffb7a604810dfffba210d79e12855e5c61e9295fedeff32db'
  ['semeru-22.0.2+9']='b644d099fdacf660c627c6fda09ee5d680611f3195f8cebc1588b410e85cc9f0'
  ['semeru-23.0.0+37']='95e1116a38567fa5b1799045f05d95bd23f419ff5c0baa2100d88f113a2cb48b'
  ['semeru-23.0.1+11']='2aa3cc78feab5cf1c21a830797694c9b8b7898072a40c252f442b832117a3809'
  ['semeru-23.0.2+7']='76ba23aefc68b2d3838895cf7dedc69a4a28fa3b6cdbff3cae3078b550404c1c'
  ['semeru-24.0.2+12']='480845cb69ef0d7a33ff70e28bbdf882c27f764bd76bc905f5fa40934d5a0c06'
  ['semeru-25.0.0-m2+36']='8e6fe1ebe59e8bb21d51f336d371749efda52f01c7f29f9c6d81743fb408c094'
  ['semeru-25.0.0+36.0.LTS']='718b4cb10c95a872d63c22254e4d1879011f7fff05dde1d21af6b63d40a5bb47'
)

# NOTE Heroku java agent url, stored in assets
# https://repo1.maven.org/maven2/com/heroku/agent/heroku-java-metrics-agent/4.0.2/heroku-java-metrics-agent-4.0.2.jar
# NOTE issues with 4.0.3? See 'port already in use' error
# https://repo1.maven.org/maven2/com/heroku/agent/heroku-java-metrics-agent/4.0.3/heroku-java-metrics-agent-4.0.3.jar

# Default version
version="semeru-25.0.0+36.0.LTS"

echo "-----> jruby[java]: buildpack 2025-01-19-02"

# Read version from system.properties file if available
if [ -f $BUILD_DIR/system.properties ]; then
  version=$(cat $BUILD_DIR/system.properties | grep java.runtime.version | cut -d= -f2)
  echo "-----> jruby[java]: Using version $version from $BUILD_DIR/system.properties"
else
  echo "-----> jruby[java]: Using version $version set as default fallback"
fi

# dest is the path in the application that java will be extracted to.
dest="$BUILD_DIR/vendor/java"

# dest_java_assets is the path in the application that java-specific assets will be extracted to.
dest_java_assets="$BUILD_DIR/vendor/java-assets"

# bundle is the full path to the cached java binaries for this version.
bundle=$CACHE_DIR/java/$version

function download() {
  url="${urls[$version]}"

  # Disable exit on command failure so we can provide better error messages
  set +e

  if [[ -z $url ]]; then
    echo " !     jruby[java]: No url for version $version"
    exit 1
  fi

  echo "       jruby[java]: Downloading $url"
  status=$(curl -sL -f -w "%{http_code}" -o /tmp/java.tar.gz $url)

  if [[ $status -ge 300 ]]; then
    echo " !     jruby[java]: Server returned HTTP $status"
    exit 1
  fi

  # Fetch the checksum from checksums above.
  checksum="${checksums[$version]}"

  if [[ -z $checksum ]]; then
    echo " !     jruby[java]: No checksum for version $version"
    exit 1
  fi

  # Verify the SHA256 checksum for the source
  echo "$checksum /tmp/java.tar.gz" | sha256sum --status -c -

  # Ensure the checksum passed
  retVal=$?
  if [[ $retVal -ne 0 ]]; then
    echo " !     jruby[java]: Downloaded source failed checksum"
    exit $retVal
  fi

  # Reenable exit on failure
  set -e
}

function compile() {
  set +e

  echo "       jruby[java]: Compiling $version"
  (
    # Only applies to this sub-shell
    set -e

    # Logs for the sub-shell go to /tmp/blaa.log for printing in case of an
    # error.
    exec > /tmp/java.log 2>&1

    # Extract straight to cached bundle
    rm -rf $bundle && mkdir -p $bundle

    # Extract the source 
    tar --strip-components=1 -xf /tmp/java.tar.gz -C $bundle

    # Prune
    rm -rf $bundle/demo $bundle/man $bundle/lib/src.zip
  )

  retVal=$?
  if [[ $retVal -ne 0 ]]; then
    echo " !     jruby[java]: Failed to compile java"
    cat /tmp/java.log

    exit $retVal
  fi

  # Reenable exit on failure
  set -e
}

# Check if this version of java is in the cache and download it if it
# doesn't exist.
if [[ ! -d $bundle ]]; then
  echo "-----> jruby[java]: Installing $version from source"

  download
  compile
else
  echo "-----> jruby[java]: Installing $version from cache"
fi

rm -rf $dest && mkdir -p $dest
cp -r $bundle -T $dest/

rm -rf $dest_java_assets && mkdir -p $dest_java_assets
echo "-----> jruby[java]: Installing common assets from buildpack folder"
cp $BUILDPACK_DIR/java-assets/* $dest_java_assets

mkdir -p $BUILD_DIR/.profile.d

cat > $BUILD_DIR/.profile.d/java.sh <<EOF
export JAVA_HOME=\$HOME/vendor/java
export PATH=\$JAVA_HOME/bin:\$PATH
export LD_LIBRARY_PATH=\$JAVA_HOME/lib/server:\$LD_LIBRARY_PATH
EOF

# Needed for running JRuby later
JAVA_HOME=$BUILD_DIR/vendor/java
PATH=$JAVA_HOME/bin:$PATH
LD_LIBRARY_PATH=$JAVA_HOME/lib/server:$LD_LIBRARY_PATH

echo "-----> jruby[java]: Done"
