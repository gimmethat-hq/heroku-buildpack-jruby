#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

# Urls of different sources
declare -A urls=(
  ['jruby-9.4.7.0']='https://repo1.maven.org/maven2/org/jruby/jruby-dist/9.4.7.0/jruby-dist-9.4.7.0-bin.tar.gz'
  ['jruby-9.4.8.0']='https://repo1.maven.org/maven2/org/jruby/jruby-dist/9.4.8.0/jruby-dist-9.4.8.0-bin.tar.gz'
  ['jruby-9.4.9.0']='https://repo1.maven.org/maven2/org/jruby/jruby-dist/9.4.9.0/jruby-dist-9.4.9.0-bin.tar.gz'
  ['jruby-9.4.12.0']='https://repo1.maven.org/maven2/org/jruby/jruby-dist/9.4.12.0/jruby-dist-9.4.12.0-bin.tar.gz'
)

# SHA256 checksums of different sources
declare -A checksums=(
  ['jruby-9.4.7.0']='f1c39f8257505300a528ff83fe4721fbe61a855abb25e3d27d52d43ac97a4d80'
  ['jruby-9.4.8.0']='347b6692bd9c91c480a45af25ce88d77be8b6e4ac4a77bc94870f2c5b54bc929'
  ['jruby-9.4.9.0']='8d64736e66a3c0e1e1ea813b6317219c5d43769e5d06a4417311e2baa8b40ef7'
  ['jruby-9.4.12.0']='05c5d203d6990c92671cc42f57d2fa1c1083bbfd16fa7023dc5848cdb8f0aa2e'
)

# Read version from .ruby-version file
if [ -f $BUILD_DIR/.ruby-version ]; then
  version=$(cat $BUILD_DIR/.ruby-version)
  echo "-----> jruby[ruby]: Using version $version from $BUILD_DIR/.ruby-version"
else
  echo " !     jruby[ruby]: No version given in $BUILD_DIR/.ruby-version"
  exit 1
fi

# Read bundler version from .bundler-version file
if [ -f $BUILD_DIR/.bundler-version ]; then
  bundler_version=$(cat $BUILD_DIR/.bundler-version)
  echo "-----> jruby[ruby]: Using bundler version $bundler_version from $BUILD_DIR/.bundler-version"
else
  echo " !     jruby[ruby]: No bundler version given in $BUILD_DIR/.bundler-version"
  exit 1
fi

# dest is the path in the application that ruby will be extracted to.
dest="$BUILD_DIR/vendor/ruby"

# bundle is the full path to the cached ruby binaries for this version.
bundle=$CACHE_DIR/ruby/$version

function download() {
  url="${urls[$version]}"

  # Disable exit on command failure so we can provide better error messages
  set +e

  if [[ -z $url ]]; then
    echo " !     jruby[ruby]: No url for version $version"
    exit 1
  fi

  echo "       jruby[ruby]: Downloading $url"
  status=$(curl -sL -f -w "%{http_code}" -o /tmp/ruby.tar.gz $url)

  if [[ $status -ge 300 ]]; then
    echo " !     jruby[ruby]: Server returned HTTP $status"
    exit 1
  fi

  # Fetch the checksum from checksums above.
  checksum="${checksums[$version]}"

  if [[ -z $checksum ]]; then
    echo " !     jruby[ruby]: No checksum for version $version"
    exit 1
  fi

  # Verify the SHA256 checksum for the source
  echo "$checksum /tmp/ruby.tar.gz" | sha256sum --status -c -

  # Ensure the checksum passed
  retVal=$?
  if [[ $retVal -ne 0 ]]; then
    echo " !     jruby[ruby]: Downloaded source failed checksum"
    exit $retVal
  fi

  # Reenable exit on failure
  set -e
}

function compile() {
  set +e

  echo "       jruby[ruby]: Compiling $version"
  (
    # Only applies to this sub-shell
    set -e

    # Logs for the sub-shell go to /tmp/blaa.log for printing in case of an
    # error.
    exec > /tmp/ruby.log 2>&1

    # Extract straight to cached bundle
    rm -rf $bundle && mkdir -p $bundle

    # Extract the source 
    tar --strip-components=1 -xf /tmp/ruby.tar.gz -C $bundle

    # Prune
    rm -rf $bundle/samples
  )

  retVal=$?
  if [[ $retVal -ne 0 ]]; then
    echo " !     jruby[ruby]: Failed to compile ruby"
    cat /tmp/ruby.log

    exit $retVal
  fi

  # Reenable exit on failure
  set -e
}

function install_gems() {
  set +e

  echo "       jruby[ruby]: Installing gems"
  (
    # Only applies to this sub-shell
    set -e

    # Logs for the sub-shell go to /tmp/blaa.log for printing in case of an
    # error.
    exec > /tmp/gems.log 2>&1

    # Ensure Ruby is on PATH
    PATH=$dest/bin:$PATH
    gem install bundler -v $bundler_version --no-document

    # Nastiness of bundler --deployment: run from Ruby app root
    cd $BUILD_DIR
    export BUNDLE_WITHOUT='development:test'
    export BUNDLE_PATH=$BUILD_DIR/vendor/bundle
    export BUNDLE_BIN=$BUNDLE_PATH/bin
    export BUNDLE_DEPLOYMENT=1

    rm -rf $BUNDLE_PATH
    bundle install -j4
  )

  retVal=$?
  if [[ $retVal -ne 0 ]]; then
    echo " !     jruby[ruby]: Failed to install gems"
    cat /tmp/gems.log

    exit $retVal
  fi

  # Reenable exit on failure
  set -e
}

# Check if this version of ruby is in the cache and download it if it
# doesn't exist.
if [[ ! -d $bundle ]]; then
  echo "-----> jruby[ruby] Installing $version from source"

  download
  compile
else
  echo "-----> jruby[ruby]: Installing $version from cache"
fi

rm -rf $dest && mkdir -p $dest
cp -r $bundle -T $dest/
# Create ruby symlink
cd $dest/bin
ln -s jruby ruby
cd -

install_gems

mkdir -p $BUILD_DIR/.profile.d

# NOTE $HOME/bin is first in PATH. Also, prior ruby symlink ensures that $HOME/bin scripts can reference ruby, not jruby
cat > $BUILD_DIR/.profile.d/ruby.sh <<EOF
export BUNDLE_WITHOUT='development:test'
export BUNDLE_PATH=\$HOME/vendor/bundle
export BUNDLE_BIN=\$BUNDLE_PATH/bin
export BUNDLE_DEPLOYMENT=1
export PATH=\$HOME/bin:\$BUNDLE_BIN:\$HOME/vendor/ruby/bin:\$PATH
EOF

echo "-----> jruby[ruby]: Done"